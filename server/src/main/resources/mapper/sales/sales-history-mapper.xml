<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.olivin.app.sales.mapper.SalesHistoryMapper">
    <!-- 판매 이력 전체 조회 -->
    <select id="selectAllSalesHistory" resultType="SalesHistoryVO" parameterType="Map">
        SELECT p.product_id,
               p.product_name,
               get_datacode_name(p.category_main) as category_main,
               get_datacode_name(p.category_sub) as category_sub,
               c.comp_name,
               p.sell_price,
               SUM(sod.quantity) as quantity,
               SUM(sod.quantity * sod.price) as total_price,
               p.product_spec || get_datacode_name(p.unit) as product_spec
        FROM   sales_orders so JOIN sales_orders_detail sod ON so.so_id = sod.so_id
                               JOIN products p ON sod.product_id = p.product_id
                               JOIN companys c ON so.comp_id = c.comp_id
        WHERE  c.comp_type = '100002'
          AND  so.status = '020001'
        GROUP  BY p.product_id, p.product_name, p.category_main, p.category_sub, c.comp_name, p.sell_price, p.product_spec, p.unit
    </select>

    <!-- 조건에 맞는 판매 이력 조회 -->
    <select id="selectSalesHistoryList" parameterType="SalesHistoryVO" resultType="SalesHistoryVO">
        SELECT p.product_id,
               p.product_name,
               get_datacode_name(p.category_main) as category_main,
               get_datacode_name(p.category_sub) as category_sub,
               c.comp_name,
               p.sell_price,
               SUM(sod.quantity) as quantity,
               SUM(sod.quantity * sod.price) as total_price,
               p.product_spec || get_datacode_name(p.unit) as product_spec
        FROM   sales_orders so JOIN sales_orders_detail sod ON so.so_id = sod.so_id
                               JOIN products p ON sod.product_id = p.product_id
                               JOIN companys c ON so.comp_id = c.comp_id
        WHERE  c.comp_type = '100002'
          AND  so.status = '020001'
    <if test="productName != null and productName != ''">
          AND  p.product_name LIKE '%' || #{productName} || '%'
    </if>
    <choose>
        <when test="categorySub == null or categorySub == ''">
        </when>
        <when test="categorySub.endsWith('전체')">
            AND  p.category_sub LIKE SUBSTR(get_datacode_value(#{categorySub}), 1, 3) || '%'
        </when>
        <otherwise>
            AND  p.category_sub = get_datacode_value(#{categorySub})
        </otherwise>
    </choose>
    <if test="compName != null and compName != ''">
          AND  c.comp_name LIKE '%' || #{compName} || '%'
    </if>
    <!-- 판매일자 범위 지정 -->
    <if test="salesDatesFrom != null and salesDatesTo != null">
          AND  TRUNC(so.so_date) BETWEEN #{salesDatesFrom} AND #{salesDatesTo}
    </if>
    <!-- 판매일자(시작일)만 지정된 경우 -->
    <if test="salesDatesFrom != null and salesDatesTo == null">
    <![CDATA[
          AND TRUNC(so.so_date) >= #{salesDatesFrom}
    ]]>
    </if>
    <!-- 판매일자(종료일)만 지정된 경우 -->
    <if test="salesDatesFrom == null and salesDatesTo != null">
    <![CDATA[
          AND TRUNC(so.so_date) <= #{salesDatesTo}
    ]]>
    </if>
        GROUP BY p.product_id, p.product_name, p.category_main, p.category_sub, c.comp_name, p.sell_price, p.product_spec, p.unit
        ORDER BY c.comp_name, p.product_id
    </select>
</mapper>