<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.olivin.app.sales.mapper.SalesOrdersMapper">
    <sql id="salesIdPrefix">
    'SOR'
    </sql>
    <!-- select -->
    <select id="selectAllList" resultType="SalesOrdersVO" parameterType="SearchSalesOrdersVO">
        SELECT
            so.so_id,
            so.comp_id,
            c.comp_name,
            so.payment_type,
            GET_DATACODE_NAME(so.payment_type) payment_type_name,
            so.status,
            GET_DATACODE_NAME(so.status) status_name,
            so.total_price,
            so.emp_id,
            e.emp_name,
            so.so_date
        FROM
            sales_orders so
        JOIN companys c ON (so.comp_id = c.comp_id)
        JOIN employees e ON (so.emp_id = e.employee_id)
        <where>
        	<if test="soId != null and soId != ''">
                AND so.so_id LIKE '%'||#{soId}||'%'
            </if>
        	<if test="compName != null and compName != ''">
                AND c.comp_name LIKE '%'||#{compName}||'%'
            </if>
        	<if test="empName != null and empName != ''">
                AND e.emp_name LIKE '%'||#{empName}||'%'
            </if>
        	<if test="paymentType != null and paymentType != ''">
                AND so.payment_type = #{paymentType}
            </if>
        	<if test="status != null and status != ''">
                AND so.status = #{status}
            </if>
            <if test="soDateFrom != null and soDateTo != null">
	            AND TRUNC(so.so_date) BETWEEN #{soDateFrom} AND #{soDateTo}
	        </if>
	        <if test="soDateFrom != null and soDateTo == null">
	            AND TRUNC(so.so_date) &gt;= #{soDateFrom}
	        </if>
	        <if test="soDateFrom == null and soDateTo != null">
	            AND TRUNC(so.so_date) &lt;= #{soDateTo}
	        </if>
        </where>
        ORDER BY so.so_id DESC
    </select>
    
    <select id="selectOneBySoId" resultType="SalesOrdersVO" parameterType="String">
        SELECT
            so.so_id,
            so.comp_id,
            c.comp_name,
            so.payment_type,
            GET_DATACODE_NAME(so.payment_type) payment_type_name,
            so.status,
            GET_DATACODE_NAME(so.status) status_name,
            so.total_price,
            so.emp_id,
            e.emp_name,
            so.so_date
        FROM
            sales_orders so
        JOIN
            companys c ON (so.comp_id = c.comp_id)
        JOIN
            employees e ON (so.emp_id = e.employee_id)
        WHERE
            so.so_id = #{soId}
    </select>
    
    <select id="selectDetailsBySoId" resultType="SalesOrdersDetailVO" parameterType="String">
        SELECT
            sod.sod_id,
            sod.product_id,
            p.product_name,
            (sod.price / sod.quantity) as unit_price,
            sod.quantity,
            sod.price,
            sod.so_id
        FROM
            sales_orders_detail sod
        JOIN
            products p ON (sod.product_id = p.product_id)
        WHERE
            sod.so_id = #{soId}
    </select>
    
    <!-- insert -->
    <insert id="insertOne" parameterType="SalesOrdersVO">
        <selectKey keyProperty="soId" resultType="string" order="BEFORE">
        SELECT
            <include refid="salesIdPrefix"/> || TO_CHAR(SYSDATE, 'YYYYMMDD') ||
            LPAD(NVL(MAX(TO_NUMBER(SUBSTR(so_id, LENGTH(<include refid="salesIdPrefix"/> || TO_CHAR(SYSDATE, 'YYYYMMDD')) + 1))), 0) + 1, 3, '0')
        FROM sales_orders
        WHERE so_id LIKE <include refid="salesIdPrefix"/> || TO_CHAR(SYSDATE, 'YYYYMMDD') || '%'
        </selectKey>
        INSERT INTO sales_orders (
            so_id,
            total_price,
            payment_type,
            so_date,
            status,
            comp_id,
            emp_id
        ) VALUES (
            #{soId},
            #{totalPrice},
            #{paymentType},
            #{soDate},
            #{status},
            #{compId},
            #{empId}
        )
    </insert>

    <insert id="insertDetailOne" parameterType="SalesOrdersDetailVO">
        INSERT INTO sales_orders_detail (
            sod_id,
            product_id,
            quantity,
            price,
            so_id
        ) VALUES (
            #{sodId},
            #{productId},
            #{quantity},
            #{price},
            #{soId}
        )
    </insert>

    <!-- 일일 정산 등록 -->
    <insert id="insertDailyClosing" parameterType="SalesDailyClosingVO">
        INSERT INTO branch_closing (
            comp_id,
            closing_date,
            total_price
        ) VALUES (
            #{compId},
            #{closingDate},
            #{totalPrice}
        )
    </insert>

    <!-- 일일 정산을 위한 일 매출 총액 조회 -->
    <select id="selectDailySummary" parameterType="SalesDailyClosingVO" resultType="double">
        SELECT
            SUM(total_price) AS total_price
        FROM
            sales_orders
        WHERE
            TRUNC(so_date) = #{closingDate}
            AND comp_id = #{compId}
            AND status = '020001'
    </select>

    <!-- 일일 정산을 위한 결제방식별 매출 집계 조회 -->
    <select id="selectDailySummaryByPaymentType" resultType="java.util.HashMap">
        SELECT
            COUNT(*) AS order_count,
            SUM(total_price) AS total_amount,
            SUM(CASE WHEN payment_type = '160001' THEN total_price ELSE 0 END) AS cash_amount,
            SUM(CASE WHEN payment_type = '160002' THEN total_price ELSE 0 END) AS transfer_amount,
            SUM(CASE WHEN payment_type = '160003' THEN total_price ELSE 0 END) AS card_amount
        FROM
            sales_orders
        WHERE
            TRUNC(so_date) = TO_DATE(#{date}, 'YYYY-MM-DD')
            <if test="compId != null and compId != ''">
                AND comp_id = #{compId}
            </if>
            AND status = '020001'
    </select>
</mapper>