<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.olivin.app.auth.mapper.UserMapper">

    <!-- Result Map -->
    <resultMap id="UserResultMap" type="com.olivin.app.auth.service.UserVO">
        <id property="employeeId" column="EMPLOYEE_ID"/>
        <result property="empName" column="EMP_NAME"/>
        <result property="password" column="PASSWORD"/>
        <result property="email" column="EMAIL"/>
        <result property="phone" column="PHONE"/>
        <result property="position" column="POSITION"/>
        <result property="roleId" column="ROLE_ID"/>
        <result property="status" column="STATUS"/>
        <result property="departmentId" column="DEPARTMENT_ID"/>
        <result property="roleName" column="ROLE_NAME"/>
        <result property="deptName" column="DEPT_NAME"/>
    </resultMap>

    <!-- 사원번호로 사용자 조회 (활성 사용자만) -->
    <select id="findByEmployeeIdAndStatusActive" parameterType="string" resultMap="UserResultMap">
        SELECT 
            e.EMPLOYEE_ID,
            e.EMP_NAME,
            e.PASSWORD,
            e.EMAIL,
            e.PHONE,
            e.POSITION,
            e.ROLE_ID,
            e.STATUS,
            e.DEPARTMENT_ID,
            r.ROLE_NAME,
            d.DEPT_NAME
        FROM EMPLOYEES e
        LEFT JOIN ROLES r ON e.ROLE_ID = r.ROLE_ID
        LEFT JOIN DEPARTMENTS d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID
        WHERE e.EMPLOYEE_ID = #{employeeId}
        AND e.STATUS = '050001'
    </select>

    <!-- 사원번호로 사용자 조회 -->
    <select id="findByEmployeeId" parameterType="string" resultMap="UserResultMap">
        SELECT 
            e.EMPLOYEE_ID,
            e.EMP_NAME,
            e.PASSWORD,
            e.EMAIL,
            e.PHONE,
            e.POSITION,
            e.ROLE_ID,
            e.STATUS,
            e.DEPARTMENT_ID,
            'ROLE_'||upper(r.ROLE_NAME) AS ROLE_NAME,
            d.DEPT_NAME
        FROM EMPLOYEES e
        LEFT JOIN ROLES r ON e.ROLE_ID = r.ROLE_ID
        LEFT JOIN DEPARTMENTS d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID
        WHERE e.EMPLOYEE_ID = #{employeeId}
    </select>

    <!-- 사용자의 권한 목록 조회 -->
    <select id="findPermissionsByEmployeeId" parameterType="string" resultType="com.olivin.app.auth.service.PermissionVO">
        SELECT 
            p.PERM_ID as permId,
            p.PERM_NAME as permName,
            p.PERM_DESCRIPTION as permDescription
        FROM PERMISSIONS p
        INNER JOIN ROLE_PERMISSION rp ON p.PERM_ID = rp.PERM_ID
        INNER JOIN EMPLOYEES e ON rp.ROLE_ID = e.ROLE_ID
        WHERE e.EMPLOYEE_ID = #{employeeId}
        AND e.STATUS = '050001'
    </select>

    <!-- 사용자 정보 수정 -->
    <update id="updateUser" parameterType="com.olivin.app.auth.service.UserVO">
        UPDATE EMPLOYEES SET
            EMP_NAME = #{empName},
            EMAIL = #{email},
            PHONE = #{phone},
            POSITION = #{position},
            DEPARTMENT_ID = #{departmentId},
            ROLE_ID = #{roleId},
            UPDATE_DATE = SYSDATE
        WHERE EMPLOYEE_ID = #{employeeId}
    </update>

    <!-- 사원번호 존재 확인 -->
    <select id="existsByEmployeeId" parameterType="string" resultType="boolean">
        SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END
        FROM EMPLOYEES
        WHERE EMPLOYEE_ID = #{employeeId}
    </select>

</mapper>