<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace를 RolesMapper로 수정 -->
<mapper namespace="com.olivin.app.roles.mapper.RolesMapper">
    
    <!-- ResultMap 정의 - RolesVO로 수정 -->
    <resultMap id="RoleResultMap" type="com.olivin.app.roles.service.RolesVO">
        <id property="roleId" column="ROLE_ID"/>
        <result property="roleName" column="ROLE_NAME"/>
        <result property="roleDesc" column="ROLE_DESC"/>
        <result property="regUser" column="REG_USER"/>
        <result property="regDate" column="REG_DATE"/>
        <result property="updateUser" column="UPDATE_USER"/>
        <result property="updateDate" column="UPDATE_DATE"/>
        <result property="employeeCount" column="EMPLOYEE_COUNT"/>
        <result property="permissionCount" column="PERMISSION_COUNT"/>
        <result property="permissionNames" column="PERMISSION_NAMES"/>
    </resultMap>

    <!-- 모든 권한 목록 조회 -->
    <select id="selectAllRoles" resultMap="RoleResultMap">
        SELECT r.ROLE_ID, r.ROLE_NAME, r.ROLE_DESC, r.REG_USER, r.REG_DATE,
               r.UPDATE_USER, r.UPDATE_DATE,
               (SELECT COUNT(*) FROM EMPLOYEES e WHERE e.ROLE_ID = r.ROLE_ID) as EMPLOYEE_COUNT,
               (SELECT COUNT(*) FROM ROLE_PERMISSION rp WHERE rp.ROLE_ID = r.ROLE_ID) as PERMISSION_COUNT,
               (SELECT LISTAGG(p.PERM_NAME, ', ') WITHIN GROUP (ORDER BY p.PERM_NAME)
                FROM ROLE_PERMISSION rp2 
                JOIN PERMISSIONS p ON rp2.PERM_ID = p.PERM_ID 
                WHERE rp2.ROLE_ID = r.ROLE_ID) as PERMISSION_NAMES
        FROM   ROLES r
        ORDER BY r.ROLE_ID ASC
    </select>

    <!-- 조건별 권한 목록 조회 -->
    <select id="selectRoleList" parameterType="com.olivin.app.roles.service.RolesVO" resultMap="RoleResultMap">
        SELECT r.ROLE_ID, r.ROLE_NAME, r.ROLE_DESC, r.REG_USER, r.REG_DATE,
               r.UPDATE_USER, r.UPDATE_DATE,
               (SELECT COUNT(*) FROM EMPLOYEES e WHERE e.ROLE_ID = r.ROLE_ID) as EMPLOYEE_COUNT,
               (SELECT COUNT(*) FROM ROLE_PERMISSION rp WHERE rp.ROLE_ID = r.ROLE_ID) as PERMISSION_COUNT,
               (SELECT LISTAGG(p.PERM_NAME, ', ') WITHIN GROUP (ORDER BY p.PERM_NAME)
                FROM ROLE_PERMISSION rp2 
                JOIN PERMISSIONS p ON rp2.PERM_ID = p.PERM_ID 
                WHERE rp2.ROLE_ID = r.ROLE_ID) as PERMISSION_NAMES
        FROM   ROLES r
        WHERE  1=1
        <if test="roleName != null and roleName != ''">
            AND r.ROLE_NAME LIKE '%' || #{roleName} || '%'
        </if>
        <if test="roleDesc != null and roleDesc != ''">
            AND r.ROLE_DESC LIKE '%' || #{roleDesc} || '%'
        </if>
        ORDER BY r.ROLE_ID ASC
    </select>

    <!-- 검색 조건에 따른 권한 목록 조회 -->
    <select id="selectRolesByCondition" parameterType="Map" resultMap="RoleResultMap">
        SELECT r.ROLE_ID, r.ROLE_NAME, r.ROLE_DESC, r.REG_USER, r.REG_DATE,
               r.UPDATE_USER, r.UPDATE_DATE,
               (SELECT COUNT(*) FROM EMPLOYEES e WHERE e.ROLE_ID = r.ROLE_ID) as EMPLOYEE_COUNT,
               (SELECT COUNT(*) FROM ROLE_PERMISSION rp WHERE rp.ROLE_ID = r.ROLE_ID) as PERMISSION_COUNT,
               (SELECT LISTAGG(p.PERM_NAME, ', ') WITHIN GROUP (ORDER BY p.PERM_NAME)
                FROM ROLE_PERMISSION rp2 
                JOIN PERMISSIONS p ON rp2.PERM_ID = p.PERM_ID 
                WHERE rp2.ROLE_ID = r.ROLE_ID) as PERMISSION_NAMES
        FROM   ROLES r
        WHERE  1=1
        <if test="roleName != null and roleName != ''">
            AND r.ROLE_NAME LIKE '%' || #{roleName} || '%'
        </if>
        <if test="roleDesc != null and roleDesc != ''">
            AND r.ROLE_DESC LIKE '%' || #{roleDesc} || '%'
        </if>
        <if test="regUser != null and regUser != ''">
            AND r.REG_USER LIKE '%' || #{regUser} || '%'
        </if>
        <if test="regDateFrom != null and regDateFrom != ''">
            <![CDATA[
                AND r.REG_DATE >= TO_DATE(#{regDateFrom}, 'YYYY-MM-DD')
            ]]>
        </if>
        <if test="regDateTo != null and regDateTo != ''">
            <![CDATA[
                AND r.REG_DATE <= TO_DATE(#{regDateTo}, 'YYYY-MM-DD') + INTERVAL '1' DAY - INTERVAL '1' SECOND
            ]]>
        </if>
        ORDER BY r.ROLE_ID ASC
    </select>

    <!-- 특정 권한 조회 (권한 정보 포함) -->
    <select id="selectRole" parameterType="Integer" resultMap="RoleResultMap">
        SELECT r.ROLE_ID, r.ROLE_NAME, r.ROLE_DESC, r.REG_USER, r.REG_DATE,
               r.UPDATE_USER, r.UPDATE_DATE,
               (SELECT COUNT(*) FROM EMPLOYEES e WHERE e.ROLE_ID = r.ROLE_ID) as EMPLOYEE_COUNT,
               (SELECT COUNT(*) FROM ROLE_PERMISSION rp WHERE rp.ROLE_ID = r.ROLE_ID) as PERMISSION_COUNT,
               (SELECT LISTAGG(p.PERM_NAME, ', ') WITHIN GROUP (ORDER BY p.PERM_NAME)
                FROM ROLE_PERMISSION rp2 
                JOIN PERMISSIONS p ON rp2.PERM_ID = p.PERM_ID 
                WHERE rp2.ROLE_ID = r.ROLE_ID) as PERMISSION_NAMES
        FROM   ROLES r
        WHERE  r.ROLE_ID = #{roleId}
    </select>

    <!-- 권한 등록 -->
    <insert id="insertRole" parameterType="com.olivin.app.roles.service.RolesVO">
        <selectKey keyProperty="roleId" resultType="Integer" order="BEFORE">
            SELECT NVL(MAX(ROLE_ID), 0) + 1 FROM ROLES
        </selectKey>
        INSERT INTO ROLES (
            ROLE_ID, ROLE_NAME, ROLE_DESC, REG_USER, REG_DATE
        ) VALUES (
            #{roleId}, #{roleName}, #{roleDesc}, #{regUser}, #{regDate}
        )
    </insert>

    <!-- 권한 정보 수정 -->
    <update id="updateRole" parameterType="com.olivin.app.roles.service.RolesVO">
        UPDATE ROLES 
        SET    
               ROLE_NAME = NVL(#{roleName}, ROLE_NAME),
               ROLE_DESC = NVL(#{roleDesc}, ROLE_DESC),
               UPDATE_USER = NVL(#{updateUser}, UPDATE_USER),
               UPDATE_DATE = NVL(#{updateDate}, SYSDATE)
        WHERE  ROLE_ID = #{roleId}
    </update>

    <!-- 권한 삭제 -->
    <delete id="deleteRole" parameterType="Integer">
        DELETE FROM ROLES 
        WHERE  ROLE_ID = #{roleId}
    </delete>

    <!-- 권한 ID 존재 여부 확인 -->
    <select id="checkRoleId" parameterType="Integer" resultType="int">
        SELECT COUNT(*)
        FROM   ROLES
        WHERE  ROLE_ID = #{roleId}
    </select>

    <!-- 권한명 중복 확인 -->
    <select id="checkRoleName" resultType="int">
        SELECT COUNT(*)
        FROM   ROLES
        WHERE  ROLE_NAME = #{roleName}
        <if test="excludeRoleId != null">
            AND ROLE_ID != #{excludeRoleId}
        </if>
    </select>

    <!-- 마지막 권한 ID 조회 -->
    <select id="selectLastRoleId" resultType="Integer">
        SELECT MAX(ROLE_ID) FROM ROLES
    </select>

    <!-- 권한별 직원 수 통계 -->
    <select id="selectRoleStatsByEmployee" resultType="map">
        SELECT r.ROLE_ID,
               r.ROLE_NAME,
               COUNT(e.EMPLOYEE_ID) as EMPLOYEE_COUNT
        FROM   ROLES r
        LEFT JOIN EMPLOYEES e ON r.ROLE_ID = e.ROLE_ID
        GROUP BY r.ROLE_ID, r.ROLE_NAME
        ORDER BY r.ROLE_ID
    </select>

    <!-- 최근 등록된 권한 조회 -->
    <select id="selectRecentRoles" parameterType="int" resultMap="RoleResultMap">
        SELECT r.ROLE_ID, r.ROLE_NAME, r.ROLE_DESC, r.REG_USER, r.REG_DATE,
               r.UPDATE_USER, r.UPDATE_DATE,
               (SELECT COUNT(*) FROM EMPLOYEES e WHERE e.ROLE_ID = r.ROLE_ID) as EMPLOYEE_COUNT,
               (SELECT COUNT(*) FROM ROLE_PERMISSION rp WHERE rp.ROLE_ID = r.ROLE_ID) as PERMISSION_COUNT,
               (SELECT LISTAGG(p.PERM_NAME, ', ') WITHIN GROUP (ORDER BY p.PERM_NAME)
                FROM ROLE_PERMISSION rp2 
                JOIN PERMISSIONS p ON rp2.PERM_ID = p.PERM_ID 
                WHERE rp2.ROLE_ID = r.ROLE_ID) as PERMISSION_NAMES
        FROM   ROLES r
        ORDER BY r.REG_DATE DESC
        FETCH FIRST #{limit} ROWS ONLY
    </select>

    <!-- 권한 사용 여부 확인 -->
    <select id="checkRoleInUse" parameterType="Integer" resultType="int">
        SELECT COUNT(*)
        FROM   EMPLOYEES
        WHERE  ROLE_ID = #{roleId}
    </select>

    <!-- === 권한-권한 매핑 관련 (간소화) === -->

    <!-- 모든 권한 목록 조회 (Map 형태) -->
    <select id="selectAllPermissions" resultType="map">
        SELECT PERM_ID, PERM_NAME, PERM_DESCRIPTION
        FROM   PERMISSIONS
        ORDER BY PERM_ID ASC
    </select>

    <!-- 특정 권한의 권한 ID 목록 조회 -->
    <select id="selectPermissionIdsByRoleId" parameterType="Integer" resultType="Integer">
        SELECT rp.PERM_ID
        FROM   ROLE_PERMISSION rp
        WHERE  rp.ROLE_ID = #{roleId}
        ORDER BY rp.PERM_ID ASC
    </select>

    <!-- 권한에 권한 할당 -->
    <insert id="insertRolePermission">
        INSERT INTO ROLE_PERMISSION (RPERM_ID, ROLE_ID, PERM_ID)
        VALUES ((SELECT NVL(MAX(RPERM_ID), 0) + 1 FROM ROLE_PERMISSION), #{roleId}, #{permId})
    </insert>

    <!-- 권한의 모든 권한 삭제 -->
    <delete id="deleteRolePermissions" parameterType="Integer">
        DELETE FROM ROLE_PERMISSION 
        WHERE  ROLE_ID = #{roleId}
    </delete>

    <!-- 권한별 권한 수 조회 -->
    <select id="selectRolePermissionCount" resultType="map">
        SELECT r.ROLE_ID,
               r.ROLE_NAME,
               COUNT(rp.PERM_ID) as PERMISSION_COUNT
        FROM   ROLES r
        LEFT JOIN ROLE_PERMISSION rp ON r.ROLE_ID = rp.ROLE_ID
        GROUP BY r.ROLE_ID, r.ROLE_NAME
        ORDER BY r.ROLE_ID
    </select>

</mapper>