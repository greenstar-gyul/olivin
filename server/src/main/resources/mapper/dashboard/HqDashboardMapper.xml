<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.olivin.app.dashboard.mapper.HqDashboardMapper">

    <select id="getMonthlyRevenue" resultType="java.math.BigDecimal">
        SELECT NVL(SUM(sod.PRICE * sod.QUANTITY), 0) as monthly_revenue
        FROM SALES_ORDERS so
        JOIN SALES_ORDERS_DETAIL sod ON so.SO_ID = sod.SO_ID
        WHERE EXTRACT(YEAR FROM so.SALE_DATE) = EXTRACT(YEAR FROM SYSDATE)
          AND EXTRACT(MONTH FROM so.SALE_DATE) = EXTRACT(MONTH FROM SYSDATE)
    </select>

    <select id="getPreviousMonthRevenue" resultType="java.math.BigDecimal">
        SELECT NVL(SUM(sod.PRICE * sod.QUANTITY), 0) as previous_monthly_revenue
        FROM SALES_ORDERS so
        JOIN SALES_ORDERS_DETAIL sod ON so.SO_ID = sod.SO_ID
        WHERE EXTRACT(YEAR FROM so.SALE_DATE) = EXTRACT(YEAR FROM ADD_MONTHS(SYSDATE, -1))
          AND EXTRACT(MONTH FROM so.SALE_DATE) = EXTRACT(MONTH FROM ADD_MONTHS(SYSDATE, -1))
    </select>

    <select id="getSupplierDeliveryRate" resultType="java.math.BigDecimal">
        SELECT CASE 
            WHEN COUNT(*) = 0 THEN 0
            ELSE ROUND((COUNT(CASE WHEN ib.INBND_DATE &lt;= po.DUE_DATE THEN 1 END) * 100.0 / COUNT(*)), 1)
        END as delivery_rate
        FROM PURCHASE_ORDERS po
        JOIN OUTBND ob ON po.ORDER_ID = ob.ORDER_ID
        JOIN INBND ib ON ob.OUTBND_NO = ib.OUTBND_NO
        WHERE EXTRACT(YEAR FROM ib.INBND_DATE) = EXTRACT(YEAR FROM SYSDATE)
          AND EXTRACT(MONTH FROM ib.INBND_DATE) = EXTRACT(MONTH FROM SYSDATE)
    </select>

    <select id="getStockoutRate" resultType="java.math.BigDecimal">
        SELECT CASE 
            WHEN COUNT(*) = 0 THEN 0
            ELSE ROUND((COUNT(CASE WHEN ipd.REMAIN_QUANTITY = 0 THEN 1 END) * 100.0 / COUNT(*)), 1)
        END as stockout_rate
        FROM INBND_PRODUCT_D ipd
        JOIN PRODUCTS p ON ipd.UNIT = p.UNIT
        WHERE ipd.INBND_PRODUCT_NO = (
            SELECT MAX(ipd2.INBND_PRODUCT_NO) 
            FROM INBND_PRODUCT_D ipd2 
            WHERE ipd2.UNIT = ipd.UNIT
        )
    </select>

    <select id="getCostOfGoodsSold" resultType="java.math.BigDecimal">
        SELECT NVL(SUM(sod.QUANTITY * p.PURCHASE_PRICE), 0) as cogs
        FROM SALES_ORDERS so
        JOIN SALES_ORDERS_DETAIL sod ON so.SO_ID = sod.SO_ID
        JOIN PRODUCTS p ON sod.PRODUCT_ID = p.PRODUCT_ID
        WHERE EXTRACT(YEAR FROM so.SALE_DATE) = EXTRACT(YEAR FROM SYSDATE)
          AND EXTRACT(MONTH FROM so.SALE_DATE) = EXTRACT(MONTH FROM SYSDATE)
    </select>

    <select id="getAverageInventoryValue" resultType="java.math.BigDecimal">
        SELECT NVL(SUM(ipd.REMAIN_QUANTITY * p.PURCHASE_PRICE), 0) as avg_inventory_value
        FROM INBND_PRODUCT_D ipd
        JOIN PRODUCTS p ON ipd.UNIT = p.UNIT
        WHERE ipd.REMAIN_QUANTITY > 0
    </select>

    <select id="getSalesTrendByCategory" resultType="map">
        SELECT 
            CASE 
                WHEN p.CATEGORY_MAIN = '110001' THEN '스킨케어'
                WHEN p.CATEGORY_MAIN = '110002' THEN '메이크업'
                WHEN p.CATEGORY_MAIN = '110003' THEN '클렌징'
                WHEN p.CATEGORY_MAIN = '110004' THEN '헤어케어'
                WHEN p.CATEGORY_MAIN = '110005' THEN '구강용품'
                WHEN p.CATEGORY_MAIN = '110006' THEN '선케어'
                WHEN p.CATEGORY_MAIN = '110007' THEN '뷰티소품'
                WHEN p.CATEGORY_MAIN = '110008' THEN '건강식품'
                WHEN p.CATEGORY_MAIN = '110009' THEN '푸드'
                ELSE '기타'
            END as CATEGORY_NAME,
            TO_CHAR(so.SALE_DATE, 'YYYY-MM') as MONTH,
            SUM(sod.PRICE * sod.QUANTITY) as SALES
        FROM SALES_ORDERS so
        JOIN SALES_ORDERS_DETAIL sod ON so.SO_ID = sod.SO_ID
        JOIN PRODUCTS p ON sod.PRODUCT_ID = p.PRODUCT_ID
        WHERE so.SALE_DATE >= ADD_MONTHS(TRUNC(SYSDATE, 'MM'), -5)
          AND so.SALE_DATE &lt;= LAST_DAY(SYSDATE)
        GROUP BY p.CATEGORY_MAIN, TO_CHAR(so.SALE_DATE, 'YYYY-MM')
        ORDER BY MONTH, p.CATEGORY_MAIN
    </select>

    <select id="getCategorySales" resultType="map">
        SELECT 
            CASE 
                WHEN p.CATEGORY_MAIN = '110001' THEN '스킨케어'
                WHEN p.CATEGORY_MAIN = '110002' THEN '메이크업'
                WHEN p.CATEGORY_MAIN = '110003' THEN '클렌징'
                WHEN p.CATEGORY_MAIN = '110004' THEN '헤어케어'
                WHEN p.CATEGORY_MAIN = '110005' THEN '구강용품'
                WHEN p.CATEGORY_MAIN = '110006' THEN '선케어'
                WHEN p.CATEGORY_MAIN = '110007' THEN '뷰티소품'
                WHEN p.CATEGORY_MAIN = '110008' THEN '건강식품'
                WHEN p.CATEGORY_MAIN = '110009' THEN '푸드'
                ELSE '기타'
            END as category,
            NVL(SUM(sod.PRICE * sod.QUANTITY), 0) as sales,
            COUNT(DISTINCT sod.PRODUCT_ID) as product_count
        FROM SALES_ORDERS so
        JOIN SALES_ORDERS_DETAIL sod ON so.SO_ID = sod.SO_ID
        JOIN PRODUCTS p ON sod.PRODUCT_ID = p.PRODUCT_ID
        WHERE EXTRACT(YEAR FROM so.SALE_DATE) = EXTRACT(YEAR FROM SYSDATE)
          AND EXTRACT(MONTH FROM so.SALE_DATE) = EXTRACT(MONTH FROM SYSDATE)
          AND sod.PRICE IS NOT NULL
          AND sod.QUANTITY IS NOT NULL
        GROUP BY p.CATEGORY_MAIN
        HAVING NVL(SUM(sod.PRICE * sod.QUANTITY), 0) > 0
        ORDER BY sales DESC
    </select>

    <select id="getTopSuppliers" resultType="map">
        SELECT * FROM (
            SELECT 
                c.COMP_NAME as supplier_name,
                NVL(SUM(pod.PRICE * pod.QUANTITY), 0) as revenue,
                ROUND(
                    CASE WHEN COUNT(*) > 0 THEN
                        COUNT(CASE WHEN ib.INBND_DATE &lt;= po.DUE_DATE THEN 1 END) * 100.0 / COUNT(*)
                    ELSE 0 END, 1
                ) as delivery_rate,
                ROUND(DBMS_RANDOM.VALUE(85, 100), 1) as quality_score
            FROM COMPANYS c
            JOIN PURCHASE_ORDERS po ON c.COMP_ID = po.ORDER_TO_ID
            JOIN PURCHASE_ORDERS_D pod ON po.ORDER_ID = pod.ORDER_ID
            LEFT JOIN OUTBND ob ON po.ORDER_ID = ob.ORDER_ID
            LEFT JOIN INBND ib ON ob.OUTBND_NO = ib.OUTBND_NO
            WHERE c.COMP_TYPE = '공급업체'
              AND po.ORDER_DATE >= ADD_MONTHS(SYSDATE, -3)
              AND pod.PRICE IS NOT NULL
              AND pod.QUANTITY IS NOT NULL
            GROUP BY c.COMP_NAME
            HAVING NVL(SUM(pod.PRICE * pod.QUANTITY), 0) > 0
            ORDER BY revenue DESC
        )
        WHERE ROWNUM &lt;= 5
    </select>

    <select id="getTotalInventoryItems" resultType="int">
        SELECT COUNT(DISTINCT p.PRODUCT_ID) as total_items
        FROM PRODUCTS p
        WHERE EXISTS (
            SELECT 1 
            FROM INBND_PRODUCT_D ipd 
            WHERE ipd.UNIT = p.UNIT
              AND ipd.REMAIN_QUANTITY >= 0
        )
    </select>

    <select id="getLowStockItems" resultType="int">
        SELECT COUNT(DISTINCT p.PRODUCT_ID) as low_stock_items
        FROM PRODUCTS p
        WHERE p.SAFETY_STOCK > 0
          AND EXISTS (
              SELECT 1
              FROM (
                  SELECT UNIT, SUM(REMAIN_QUANTITY) as total_remain
                  FROM INBND_PRODUCT_D
                  WHERE REMAIN_QUANTITY >= 0
                  GROUP BY UNIT
              ) ipd_sum
              WHERE ipd_sum.UNIT = p.UNIT
                AND ipd_sum.total_remain > 0
                AND ipd_sum.total_remain &lt; p.SAFETY_STOCK
          )
    </select>

    <select id="getStockoutItems" resultType="int">
        SELECT COUNT(DISTINCT p.PRODUCT_ID) as stockout_items
        FROM PRODUCTS p
        WHERE NOT EXISTS (
            SELECT 1
            FROM INBND_PRODUCT_D ipd
            WHERE ipd.UNIT = p.UNIT
              AND ipd.REMAIN_QUANTITY > 0
        )
    </select>

    <select id="getTotalInventoryValue" resultType="java.math.BigDecimal">
        SELECT NVL(SUM(ipd_sum.total_remain * p.PURCHASE_PRICE), 0) as total_inventory_value
        FROM (
            SELECT UNIT, SUM(REMAIN_QUANTITY) as total_remain
            FROM INBND_PRODUCT_D
            WHERE REMAIN_QUANTITY > 0
            GROUP BY UNIT
        ) ipd_sum
        JOIN PRODUCTS p ON ipd_sum.UNIT = p.UNIT
        WHERE p.PURCHASE_PRICE IS NOT NULL
    </select>

    <select id="getAverageProcessingTime" resultType="java.math.BigDecimal">
        SELECT NVL(AVG(ib.INBND_DATE - po.ORDER_DATE), 0) as avg_processing_time
        FROM PURCHASE_ORDERS po
        JOIN OUTBND ob ON po.ORDER_ID = ob.ORDER_ID
        JOIN INBND ib ON ob.OUTBND_NO = ib.OUTBND_NO
        WHERE ib.INBND_DATE >= ADD_MONTHS(SYSDATE, -1)
    </select>

    <select id="getPreviousCostOfGoodsSold" resultType="java.math.BigDecimal">
        SELECT NVL(SUM(sod.QUANTITY * p.PURCHASE_PRICE), 0) as prev_cogs
        FROM SALES_ORDERS so
        JOIN SALES_ORDERS_DETAIL sod ON so.SO_ID = sod.SO_ID
        JOIN PRODUCTS p ON sod.PRODUCT_ID = p.PRODUCT_ID
        WHERE EXTRACT(YEAR FROM so.SALE_DATE) = EXTRACT(YEAR FROM ADD_MONTHS(SYSDATE, -1))
          AND EXTRACT(MONTH FROM so.SALE_DATE) = EXTRACT(MONTH FROM ADD_MONTHS(SYSDATE, -1))
    </select>

    <select id="getPreviousAverageInventoryValue" resultType="java.math.BigDecimal">
        SELECT NVL(SUM(ipd.REMAIN_QUANTITY * p.PURCHASE_PRICE), 0) as prev_avg_inventory_value
        FROM INBND_PRODUCT_D ipd
        JOIN PRODUCTS p ON ipd.UNIT = p.UNIT
        WHERE ipd.REMAIN_QUANTITY > 0
          AND ipd.INBND_PRODUCT_NO = (
              SELECT MAX(ipd2.INBND_PRODUCT_NO) 
              FROM INBND_PRODUCT_D ipd2 
              WHERE ipd2.UNIT = ipd.UNIT
          )
    </select>

    <select id="getInventoryByCategory" resultType="map">
        SELECT 
            p.CATEGORY_MAIN as category,
            COUNT(DISTINCT p.PRODUCT_ID) as product_count,
            NVL(SUM(ipd_sum.total_remain), 0) as total_quantity,
            NVL(SUM(ipd_sum.total_remain * p.PURCHASE_PRICE), 0) as total_value
        FROM PRODUCTS p
        LEFT JOIN (
            SELECT UNIT, SUM(REMAIN_QUANTITY) as total_remain
            FROM INBND_PRODUCT_D
            WHERE REMAIN_QUANTITY > 0
            GROUP BY UNIT
        ) ipd_sum ON p.UNIT = ipd_sum.UNIT
        WHERE p.CATEGORY_MAIN IS NOT NULL
        GROUP BY p.CATEGORY_MAIN
        ORDER BY total_value DESC
    </select>

    <select id="getPreviousSupplierDeliveryRate" resultType="java.math.BigDecimal">
        SELECT CASE 
            WHEN COUNT(*) = 0 THEN 0
            ELSE ROUND((COUNT(CASE WHEN ib.INBND_DATE &lt;= po.DUE_DATE THEN 1 END) * 100.0 / COUNT(*)), 1)
        END as prev_delivery_rate
        FROM PURCHASE_ORDERS po
        JOIN OUTBND ob ON po.ORDER_ID = ob.ORDER_ID
        JOIN INBND ib ON ob.OUTBND_NO = ib.OUTBND_NO
        WHERE EXTRACT(YEAR FROM ib.INBND_DATE) = EXTRACT(YEAR FROM ADD_MONTHS(SYSDATE, -1))
          AND EXTRACT(MONTH FROM ib.INBND_DATE) = EXTRACT(MONTH FROM ADD_MONTHS(SYSDATE, -1))
    </select>

    <select id="getPreviousStockoutRate" resultType="java.math.BigDecimal">
        SELECT CASE 
            WHEN COUNT(*) = 0 THEN 0
            ELSE ROUND((COUNT(CASE WHEN ipd.REMAIN_QUANTITY = 0 THEN 1 END) * 100.0 / COUNT(*)), 1)
        END as prev_stockout_rate
        FROM INBND_PRODUCT_D ipd
        JOIN PRODUCTS p ON ipd.UNIT = p.UNIT
        WHERE ipd.INBND_PRODUCT_NO = (
            SELECT MAX(ipd2.INBND_PRODUCT_NO) 
            FROM INBND_PRODUCT_D ipd2 
            WHERE ipd2.UNIT = ipd.UNIT
        )
    </select>

    <select id="getCriticalAlerts" resultType="map">
        SELECT * FROM (
            SELECT 
                'STOCKOUT_WARNING' as alert_type,
                '품절 임박' as title,
                p.PRODUCT_NAME || ' - 재고 ' || ipd_sum.total_remain || '개 남음' as message,
                SYSDATE as created_at,
                'HIGH' as priority,
                1 as sort_order
            FROM (
                SELECT UNIT, SUM(REMAIN_QUANTITY) as total_remain
                FROM INBND_PRODUCT_D
                WHERE REMAIN_QUANTITY >= 0
                GROUP BY UNIT
            ) ipd_sum
            JOIN PRODUCTS p ON ipd_sum.UNIT = p.UNIT
            WHERE ipd_sum.total_remain > 0
              AND p.SAFETY_STOCK > 0
              AND ipd_sum.total_remain &lt; p.SAFETY_STOCK * 0.5
              AND ROWNUM &lt;= 3
            
            UNION ALL
            
            SELECT 
                'DELIVERY_DELAY' as alert_type,
                '납기 지연' as title,
                '주문번호 ' || po.ORDER_ID || ' - ' || 
                ROUND(SYSDATE - po.DUE_DATE) || '일 지연' as message,
                SYSDATE as created_at,
                'MEDIUM' as priority,
                2 as sort_order
            FROM PURCHASE_ORDERS po
            WHERE po.DUE_DATE &lt; SYSDATE
              AND po.DUE_DATE IS NOT NULL
              AND NOT EXISTS (
                  SELECT 1 
                  FROM OUTBND ob 
                  JOIN INBND ib ON ob.OUTBND_NO = ib.OUTBND_NO
                  WHERE ob.ORDER_ID = po.ORDER_ID
              )
              AND ROWNUM &lt;= 2
            
            UNION ALL
            
            SELECT 
                'LOW_TURNOVER' as alert_type,
                '재고 회전율 저하' as title,
                p.PRODUCT_NAME || ' - 90일 이상 재고' as message,
                SYSDATE as created_at,
                'LOW' as priority,
                3 as sort_order
            FROM INBND_PRODUCT_D ipd
            JOIN PRODUCTS p ON ipd.UNIT = p.UNIT
            JOIN INBND ib ON SUBSTR(ipd.INBND_PRODUCT_NO, 1, 13) = ib.INBND_NO
            WHERE ipd.REMAIN_QUANTITY > 0
              AND ib.INBND_DATE &lt; SYSDATE - 90
              AND ib.INBND_DATE IS NOT NULL
              AND ROWNUM &lt;= 2
        )
        ORDER BY sort_order, created_at DESC
    </select>

</mapper>