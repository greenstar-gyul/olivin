<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.olivin.app.dashboard.mapper.HqDashboardMapper">

    <!-- 기존 매출 관련 쿼리 유지 -->
    <select id="getMonthlyRevenue" resultType="java.math.BigDecimal">
        SELECT NVL(SUM(sod.PRICE * sod.QUANTITY), 0) as monthly_revenue
        FROM SALES_ORDERS so
        JOIN SALES_ORDERS_DETAIL sod ON so.SO_ID = sod.SO_ID
        WHERE EXTRACT(YEAR FROM so.SO_DATE) = EXTRACT(YEAR FROM SYSDATE)
          AND EXTRACT(MONTH FROM so.SO_DATE) = EXTRACT(MONTH FROM SYSDATE)
    </select>

    <select id="getPreviousMonthRevenue" resultType="java.math.BigDecimal">
        SELECT NVL(SUM(sod.PRICE * sod.QUANTITY), 0) as previous_monthly_revenue
        FROM SALES_ORDERS so
        JOIN SALES_ORDERS_DETAIL sod ON so.SO_ID = sod.SO_ID
        WHERE EXTRACT(YEAR FROM so.SO_DATE) = EXTRACT(YEAR FROM ADD_MONTHS(SYSDATE, -1))
          AND EXTRACT(MONTH FROM so.SO_DATE) = EXTRACT(MONTH FROM ADD_MONTHS(SYSDATE, -1))
    </select>

    <!-- 출고 대기 건수 -->
    <select id="getPendingOutboundCount" resultType="int">
        SELECT COUNT(*) as pending_outbound_count
        FROM OUTBND ob
        WHERE ob.OUTBND_STATUS = '010001'
          AND ob.OUTBND_DATE >= TRUNC(SYSDATE) - 7
    </select>

    <!-- 이전 기간 출고 대기 건수 (비교용) -->
    <select id="getPreviousPendingOutboundCount" resultType="int">
        <![CDATA[
        SELECT COUNT(*) as prev_pending_outbound_count
        FROM OUTBND ob
        WHERE ob.OUTBND_STATUS = '010001'
          AND ob.OUTBND_DATE >= TRUNC(SYSDATE) - 14
          AND ob.OUTBND_DATE < TRUNC(SYSDATE) - 7
          ]]>
    </select>

    <!-- 대기중인 발주서 수 -->
    <select id="getPendingPurchaseOrderCount" resultType="int">
        SELECT COUNT(*) as pending_po_count
        FROM PURCHASE_ORDERS po
        WHERE po.ORDER_STATUS = '030001'
          AND po.ORDER_TYPE = '150002'
          AND po.ORDER_DATE >= ADD_MONTHS(SYSDATE, -1)
    </select>

    <!-- 이전 기간 대기중인 발주서 수 (비교용) -->
    <select id="getPreviousPendingPurchaseOrderCount" resultType="int">
        <![CDATA[
        SELECT COUNT(*) as prev_pending_po_count
        FROM PURCHASE_ORDERS po
        WHERE po.ORDER_STATUS = '030001'
          AND po.ORDER_TYPE = '150002'
          AND po.ORDER_DATE >= ADD_MONTHS(SYSDATE, -2)
          AND po.ORDER_DATE < ADD_MONTHS(SYSDATE, -1)
          ]]>
    </select>

    <!-- 매출 트렌드 -->
    <select id="getSalesTrendByCategory" resultType="map">
        <![CDATA[
        SELECT 
            CASE 
                WHEN p.CATEGORY_MAIN = '110001' THEN '스킨케어'
                WHEN p.CATEGORY_MAIN = '110002' THEN '메이크업'
                WHEN p.CATEGORY_MAIN = '110003' THEN '클렌징'
                WHEN p.CATEGORY_MAIN = '110004' THEN '헤어케어'
                WHEN p.CATEGORY_MAIN = '110005' THEN '구강용품'
                WHEN p.CATEGORY_MAIN = '110006' THEN '선케어'
                WHEN p.CATEGORY_MAIN = '110007' THEN '뷰티소품'
                WHEN p.CATEGORY_MAIN = '110008' THEN '건강식품'
                WHEN p.CATEGORY_MAIN = '110009' THEN '푸드'
                ELSE '기타'
            END as CATEGORY_NAME,
            TO_CHAR(so.SO_DATE, 'YYYY-MM') as MONTH,
            SUM(sod.PRICE * sod.QUANTITY) as SALES
        FROM SALES_ORDERS so
        JOIN SALES_ORDERS_DETAIL sod ON so.SO_ID = sod.SO_ID
        JOIN PRODUCTS p ON sod.PRODUCT_ID = p.PRODUCT_ID
        WHERE so.SO_DATE >= ADD_MONTHS(TRUNC(SYSDATE, 'MM'), -5)
          AND so.SO_DATE <= LAST_DAY(SYSDATE)
        GROUP BY p.CATEGORY_MAIN, TO_CHAR(so.SO_DATE, 'YYYY-MM')
        ORDER BY MONTH, p.CATEGORY_MAIN
        ]]>
    </select>

    <select id="getCategorySales" resultType="map">
        SELECT 
            CASE 
                WHEN p.CATEGORY_MAIN = '110001' THEN '스킨케어'
                WHEN p.CATEGORY_MAIN = '110002' THEN '메이크업'
                WHEN p.CATEGORY_MAIN = '110003' THEN '클렌징'
                WHEN p.CATEGORY_MAIN = '110004' THEN '헤어케어'
                WHEN p.CATEGORY_MAIN = '110005' THEN '구강용품'
                WHEN p.CATEGORY_MAIN = '110006' THEN '선케어'
                WHEN p.CATEGORY_MAIN = '110007' THEN '뷰티소품'
                WHEN p.CATEGORY_MAIN = '110008' THEN '건강식품'
                WHEN p.CATEGORY_MAIN = '110009' THEN '푸드'
                ELSE '기타'
            END as category,
            NVL(SUM(sod.PRICE * sod.QUANTITY), 0) as sales,
            COUNT(DISTINCT sod.PRODUCT_ID) as product_count
        FROM SALES_ORDERS so
        JOIN SALES_ORDERS_DETAIL sod ON so.SO_ID = sod.SO_ID
        JOIN PRODUCTS p ON sod.PRODUCT_ID = p.PRODUCT_ID
        WHERE EXTRACT(YEAR FROM so.SO_DATE) = EXTRACT(YEAR FROM SYSDATE)
          AND EXTRACT(MONTH FROM so.SO_DATE) = EXTRACT(MONTH FROM SYSDATE)
          AND sod.PRICE IS NOT NULL
          AND sod.QUANTITY IS NOT NULL
        GROUP BY p.CATEGORY_MAIN
        HAVING NVL(SUM(sod.PRICE * sod.QUANTITY), 0) > 0
        ORDER BY sales DESC
    </select>

    <!-- 상위 공급업체 -->
    <select id="getTopSuppliers" resultType="map">
        <![CDATA[
        SELECT * FROM (
            SELECT 
                po.ORDER_TO as supplier_name,
                COUNT(*) as order_count
            FROM PURCHASE_ORDERS po
            WHERE po.ORDER_TYPE = '150001'
            AND EXTRACT(YEAR FROM po.ORDER_DATE) = EXTRACT(YEAR FROM SYSDATE)
            AND EXTRACT(MONTH FROM po.ORDER_DATE) = EXTRACT(MONTH FROM SYSDATE)
            GROUP BY po.ORDER_TO
            ORDER BY COUNT(*) DESC
        )
        WHERE ROWNUM <= 5
        ]]>
    </select>

    <!-- 재고 관련 쿼리들 유지 -->
    <select id="getTotalInventoryItems" resultType="int">
        SELECT COUNT(DISTINCT p.PRODUCT_ID) as total_items
        FROM PRODUCTS p
        WHERE EXISTS (
            SELECT 1 
            FROM INBND_PRODUCT_D ipd 
            WHERE ipd.UNIT = p.UNIT
              AND ipd.REMAIN_QUANTITY >= 0
        )
    </select>

    <select id="getLowStockItems" resultType="int">
        <![CDATA[
        SELECT COUNT(DISTINCT p.PRODUCT_ID) as low_stock_items
        FROM PRODUCTS p
        WHERE p.SAFETY_STOCK > 0
          AND EXISTS (
              SELECT 1
              FROM (
                  SELECT UNIT, SUM(REMAIN_QUANTITY) as total_remain
                  FROM INBND_PRODUCT_D
                  WHERE REMAIN_QUANTITY >= 0
                  GROUP BY UNIT
              ) ipd_sum
              WHERE ipd_sum.UNIT = p.UNIT
                AND ipd_sum.total_remain > 0
                AND ipd_sum.total_remain < p.SAFETY_STOCK
          )
        ]]>
    </select>

    <select id="getStockoutItems" resultType="int">
        SELECT COUNT(DISTINCT p.PRODUCT_ID) as stockout_items
        FROM PRODUCTS p
        WHERE NOT EXISTS (
            SELECT 1
            FROM INBND_PRODUCT_D ipd
            WHERE ipd.UNIT = p.UNIT
              AND ipd.REMAIN_QUANTITY > 0
        )
    </select>

    <select id="getTotalInventoryValue" resultType="java.math.BigDecimal">
        SELECT NVL(SUM(ipd_sum.total_remain * p.PURCHASE_PRICE), 0) as total_inventory_value
        FROM (
            SELECT UNIT, SUM(REMAIN_QUANTITY) as total_remain
            FROM INBND_PRODUCT_D
            WHERE REMAIN_QUANTITY > 0
            GROUP BY UNIT
        ) ipd_sum
        JOIN PRODUCTS p ON ipd_sum.UNIT = p.UNIT
        WHERE p.PURCHASE_PRICE IS NOT NULL
    </select>

    <select id="getAverageProcessingTime" resultType="java.math.BigDecimal">
        SELECT NVL(AVG(ib.INBND_DATE - po.ORDER_DATE), 0) as avg_processing_time
        FROM PURCHASE_ORDERS po
        JOIN OUTBND ob ON po.ORDER_ID = ob.ORDER_ID
        JOIN INBND ib ON ob.OUTBND_NO = ib.OUTBND_NO
        WHERE ib.INBND_DATE >= ADD_MONTHS(SYSDATE, -1)
    </select>

    <select id="getInventoryByCategory" resultType="map">
        SELECT 
            p.CATEGORY_MAIN as category,
            COUNT(DISTINCT p.PRODUCT_ID) as product_count,
            NVL(SUM(ipd_sum.total_remain), 0) as total_quantity,
            NVL(SUM(ipd_sum.total_remain * p.PURCHASE_PRICE), 0) as total_value
        FROM PRODUCTS p
        LEFT JOIN (
            SELECT UNIT, SUM(REMAIN_QUANTITY) as total_remain
            FROM INBND_PRODUCT_D
            WHERE REMAIN_QUANTITY > 0
            GROUP BY UNIT
        ) ipd_sum ON p.UNIT = ipd_sum.UNIT
        WHERE p.CATEGORY_MAIN IS NOT NULL
        GROUP BY p.CATEGORY_MAIN
        ORDER BY total_value DESC
    </select>

    <!-- 업데이트된 알림 쿼리 -->
    <select id="getCriticalAlerts" resultType="map">
        <![CDATA[
        SELECT * FROM (
            -- 출고 대기 알림
            SELECT 
                'PENDING_OUTBOUND' as alert_type,
                '출고 대기 중' as title,
                '주문번호 ' || ob.ORDER_ID || ' - 출고 대기 중' as message,
                SYSDATE as created_at,
                'HIGH' as priority,
                1 as sort_order
            FROM OUTBND ob
            WHERE ob.OUTBND_STATUS = '010001'
            AND ob.OUTBND_DATE <= SYSDATE + 1
            AND ROWNUM <= 3
            
            UNION ALL
            
            -- 발주서 대기 알림
            SELECT 
                'PENDING_PURCHASE_ORDER' as alert_type,
                '발주서 승인 대기' as title,
                '발주서 ' || po.ORDER_ID || ' - 승인 대기 중' as message,
                SYSDATE as created_at,
                'MEDIUM' as priority,
                2 as sort_order
            FROM PURCHASE_ORDERS po
            WHERE po.ORDER_STATUS = '030001'
            AND po.ORDER_TYPE = '150002'
            AND po.ORDER_DATE <= SYSDATE - 3
            AND ROWNUM <= 3
            
            UNION ALL
            
            -- 기존 품절 알림 유지
            SELECT 
                'STOCKOUT_WARNING' as alert_type,
                '품절 임박' as title,
                p.PRODUCT_NAME || ' - 재고 ' || ipd_sum.total_remain || '개 남음' as message,
                SYSDATE as created_at,
                'HIGH' as priority,
                3 as sort_order
            FROM (
                SELECT UNIT, SUM(REMAIN_QUANTITY) as total_remain
                FROM INBND_PRODUCT_D
                WHERE REMAIN_QUANTITY >= 0
                GROUP BY UNIT
            ) ipd_sum
            JOIN PRODUCTS p ON ipd_sum.UNIT = p.UNIT
            WHERE ipd_sum.total_remain > 0
            AND p.SAFETY_STOCK > 0
            AND ipd_sum.total_remain < p.SAFETY_STOCK * 0.5
            AND ROWNUM <= 2
        )
        ORDER BY sort_order, created_at DESC
        ]]>
    </select>

</mapper>